{"version":3,"file":"static/js/757.30828acf.chunk.js","mappings":"iMACA,EAA4B,0B,2BCA5B,EAAwB,yBAAxB,EAAwD,wBAAxD,EAAuF,wBAAvF,EAAuH,yBAAvH,EAAuJ,wBAAvJ,EAAwL,0BAAxL,EAAyN,wBAAzN,EAAuP,uB,6DC6DvP,EAxDmB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SA0B3B,OACE,eAAIC,UAAWC,EAAf,SACGH,EAAMI,KAAI,SAACC,EAAMC,GAAP,OACT,gBAAIJ,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAQI,I,6+BAAWC,IAAI,UACvC,gBAAKN,UAAWC,EAASI,IAAKE,EAAUD,IAAI,WAC5C,gBAAKN,UAAWC,KAChB,gBACED,UAAWC,EACXI,IAAKF,EAAKK,OACVF,IAAI,SACJG,MAAM,OACNC,OAAO,UAET,gBAAIV,UAAWC,EAAf,WACE,0BAAKE,EAAKQ,OAAO,cACjB,0BAAKR,EAAKS,UAAU,oBAEtB,mBACAZ,UAAWC,EACXY,KAAK,SACLC,QAAS,kBA7CMC,EA6CYZ,EAAKa,QA5ClCjB,GAAS,SAAAD,GACP,IAAMmB,EAAenB,EAAMI,KAAI,SAAAC,GAC7B,OAAIA,EAAKa,KAAOD,EACVZ,EAAKe,aACA,kBACFf,GADL,IAEES,UAAWT,EAAKS,UAAY,EAC5BM,aAAa,KAGR,kBACFf,GADL,IAEES,UAAWT,EAAKS,UAAY,EAC5BM,aAAa,IAIZf,CACR,IAED,OADAgB,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IACtCA,CACR,IAtBe,IAACF,CA6CN,EACPQ,MAAO,CAAEC,gBAAiBrB,EAAKe,YAAc,UAAY,IAJ3D,SAKGf,EAAKe,YAAc,YAAc,aApBVf,EAAKa,GADxB,KA2BhB,EC5DD,GAAgB,UAAY,8BAA8B,WAAa,+BAA+B,SAAW,8BCwBjH,EAtBmB,SAAC,GAGhB,IAHoD,IAAnCS,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,SAChCC,EAAc,GAEZxB,EAAI,EAAGA,GAAIyB,KAAKC,KAAKJ,EAAWD,GAAUrB,IAC9CwB,EAAYG,KAAK3B,GAErB,OACK,gBAAKJ,UAAWC,EAAAA,UAAhB,UACG,eAAID,UAAWC,EAAAA,WAAf,SAEQ2B,EAAY1B,KAAI,SAAA8B,GAAM,OAClB,eAAIhC,UAAWC,EAAAA,SAAf,UACI,mBAASD,UAAWC,EAAAA,SAAYa,QAAS,kBAAIa,EAASK,EAAb,EAAzC,SACKA,KAFuBA,EADd,OAWzC,ECkBD,EAlCe,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOnC,EAAP,KAAcC,EAAd,KACA,GAAsCkC,EAAAA,EAAAA,UAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkBF,EAAAA,EAAAA,UAAS,GAApBR,GAAP,gBAEAW,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQ,mCAAG,oGAEKC,EAAAA,EAAAA,IAAU,qDAFf,OAEPC,EAFO,OAGbxC,EAASwC,EAAIC,MAHA,2CAAH,qDAMdH,GACH,GAAC,IAEF,IAAMI,EAAgBP,EAAcT,EAC9BiB,EAAiBD,EAAgBhB,EACjCkB,EAAc7C,EAAM8C,MAAMF,EAAgBD,GAMhD,OACI,iBAAKzC,UAAWC,EAAhB,WACA,SAAC,EAAD,CAAWH,MAAO6C,EAAa5C,SAAUA,KACrC,SAAC,EAAD,CACA0B,QAASA,EACTC,WAAY5B,EAAM+C,OAClBlB,SAVS,SAACmB,GAAD,OAAcX,EAAeW,EAA7B,MAcpB,C","sources":["webpack://test-tweet/./src/pages/Tweets/Tweets.module.css?3fe9","webpack://test-tweet/./src/components/TweetCard/TweetCard.module.css?b888","components/TweetCard/TweetCard.jsx","webpack://test-tweet/./src/components/Pagination/Pagination.module.css?4da5","components/Pagination/Pagination.jsx","pages/Tweets/Tweets.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Tweets_container__8gf6+\"};","// extracted by mini-css-extract-plugin\nexport default {\"cards\":\"TweetCard_cards__O-M6z\",\"card\":\"TweetCard_card__NmS7R\",\"logo\":\"TweetCard_logo__EnY-Z\",\"tweet\":\"TweetCard_tweet__BmEJF\",\"line\":\"TweetCard_line__Sv3j1\",\"avatar\":\"TweetCard_avatar__lNorI\",\"list\":\"TweetCard_list__BmyNT\",\"btn\":\"TweetCard_btn__8oMm-\"};","import React from 'react';\nimport s from './TweetCard.module.css';\nimport Logo from '../../image/Logo.png';\nimport TweetImg from '../../image/Tweet.png';\n// import Boy from '../../image/Boy.png';\n\n const TweetCard = ({ users, setUsers }) => {\n    \n    const handleClick = (userId) => {\n        setUsers(users => {\n          const updatedUsers = users.map(user => {\n            if (user.id === userId) {\n              if (user.isFollowing) {\n                return {\n                  ...user,\n                  followers: user.followers - 1,\n                  isFollowing: false\n                };\n              } else {\n                return {\n                  ...user,\n                  followers: user.followers + 1,\n                  isFollowing: true\n                };\n              }\n            }\n            return user;\n          });\n          localStorage.setItem('users', JSON.stringify(updatedUsers));\n          return updatedUsers;\n        });\n      };\n  return (\n    <ul className={s.cards}>\n      {users.map((user, i) => (\n        <li className={s.card} key={user.id}>\n          <img className={s.logo} src={Logo} alt=\"logo\" />\n          <img className={s.tweet} src={TweetImg} alt=\"tweet\" />\n          <div className={s.line}></div>\n          <img\n            className={s.avatar}\n            src={user.avatar}\n            alt=\"avatar\"\n            width=\"80px\"\n            height=\"80px\"\n          />\n          <ul className={s.list}>\n            <li>{user.tweets} TWEETS</li>\n            <li>{user.followers} FOLLOWERS</li>\n          </ul>\n          <button \n          className={s.btn} \n          type=\"submit\"\n          onClick={() => handleClick(user.id)}\n            style={{ backgroundColor: user.isFollowing ? '#5CD3A8' : '' }}>\n            {user.isFollowing ? 'FOLLOWING' : 'FOLLOW'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default TweetCard","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Pagination_container__DgzGU\",\"pagination\":\"Pagination_pagination__vcNDC\",\"pageLink\":\"Pagination_pageLink__C8Iez\"};","import React from \"react\";\nimport s from './Pagination.module.css';\n\nconst Pagination = ({perPage, totalUsers, paginate})=> {\n    const pageNumbers = []\n\n    for(let i = 1; i<= Math.ceil(totalUsers/perPage); i++){\n        pageNumbers.push(i)\n    }\n    return(\n         <div className={s.container}>\n            <ul className={s.pagination}>\n                {\n                    pageNumbers.map(number=>(\n                        <li className={s.pageItem} key={number}>\n                            <button  className={s.pageLink} onClick={()=>paginate(number)}>\n                                {number}\n                            </button>\n                        </li>\n                    ))\n                }\n            </ul>\n         </div>\n    )\n}\nexport default Pagination","import s from './Tweets.module.css';\nimport axios from 'axios';\nimport TweetCard from 'components/TweetCard/TweetCard';\n// import { fetchUsers } from 'services/usersAPI';\nimport { useState, useEffect } from 'react';\nimport Pagination from 'components/Pagination/Pagination';\n\n\nconst Tweets = ()=>{\n    const [users, setUsers] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [perPage] = useState(3);\n\n    useEffect(()=>{\n        const getUsers = async()=>{\n            \n            const res = await axios.get('https://648846650e2469c038fd6280.mockapi.io/users')\n            setUsers(res.data)\n            \n        }\n        getUsers()\n    },[])\n\n    const lastUserIndex = currentPage * perPage;\n    const firstUserIndex = lastUserIndex - perPage;\n    const currentUser = users.slice(firstUserIndex, lastUserIndex);\n\n    const paginate = (pageNumber)=>setCurrentPage(pageNumber)\n  \n    \n\n    return(\n        <div className={s.container}> \n        <TweetCard users={currentUser} setUsers={setUsers}  />\n            <Pagination \n            perPage={perPage}\n            totalUsers={users.length}\n            paginate={paginate}\n            />\n        </div>\n    )\n}\nexport default Tweets;"],"names":["users","setUsers","className","s","map","user","i","src","alt","TweetImg","avatar","width","height","tweets","followers","type","onClick","userId","id","updatedUsers","isFollowing","localStorage","setItem","JSON","stringify","style","backgroundColor","perPage","totalUsers","paginate","pageNumbers","Math","ceil","push","number","useState","currentPage","setCurrentPage","useEffect","getUsers","axios","res","data","lastUserIndex","firstUserIndex","currentUser","slice","length","pageNumber"],"sourceRoot":""}